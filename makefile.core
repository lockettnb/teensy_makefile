# 
# Teensy Core makefile
#
# 2019/03/17 updated for 1.8.8
# 2018/03/07 notes
#   changed ARDUINOPATH to 1.8.5 directory
#   changed flags to 1.8.5
#   changed arvhive tool name to gcc-ar
#   changed path variables a bit
#   combined copy include files with build of lib


ARDUINOPATH = /home/john/opt/arduino-1.8.8
PROJECTPATH = $(abspath $(CURDIR))
COREPATH = $(PROJECTPATH)
BUILDPATH = $(abspath $(PROJECTPATH)/build)
LIBPATH = $(abspath $(PROJECTPATH)/../lib)
INCPATH = $(abspath $(PROJECTPATH)/../include)
TOOLSPATH = $(abspath $(ARDUINOPATH)/hardware/tools)
COMPILERPATH = $(abspath $(TOOLSPATH)/arm/bin)

# toolchain programs
CC = $(abspath $(COMPILERPATH))/arm-none-eabi-gcc
CXX = $(abspath $(COMPILERPATH))/arm-none-eabi-g++
AR = $(abspath $(COMPILERPATH))/arm-none-eabi-gcc-ar
OBJCOPY = $(abspath $(COMPILERPATH))/arm-none-eabi-objcopy
OBJDUMP= $(abspath $(COMPILERPATH))/arm-none-eabi-objdump
SIZE = $(abspath $(COMPILERPATH))/arm-none-eabi-size


# stolen for the "verbose" output of Arduino compile process 
# ASMFLAGS = -c -O2 -g -Wall -ffunction-sections -fdata-sections -nostdlib -MMD -x assembler-with-cpp -mthumb -mcpu=cortex-m4 -fsingle-precision-constant -D__MK20DX256__ -DTEENSYDUINO=141 -DARDUINO=10805 -DF_CPU=96000000 -DUSB_SERIAL -DLAYOUT_US_ENGLISH

# CFLAGS = -c -O2 -g -Wall -ffunction-sections -fdata-sections -nostdlib -MMD  -mthumb -mcpu=cortex-m4 -fsingle-precision-constant -D__MK20DX256__ -DTEENSYDUINO=141 -DARDUINO=10805 -DF_CPU=96000000 -DUSB_SERIAL -DLAYOUT_US_ENGLISH

# CPPFLAGS = -c -O2 -g -Wall -ffunction-sections -fdata-sections -nostdlib -MMD -fno-exceptions -felide-constructors -std=gnu++14 -fno-rtti -mthumb -mcpu=cortex-m4 -fsingle-precision-constant -D__MK20DX256__ -DTEENSYDUINO=141 -DARDUINO=10805 -DF_CPU=96000000 -DUSB_SERIAL -DLAYOUT_US_ENGLISH

# configurable USB serial or keyboard option
# .... serial port is the default
# .... "make keyboard" will compile core software for USB keyboard
USBFLAG = USB_SERIAL
ifeq ($(USB),keyboard) 
   USBFLAG=USB_KEYBOARDONLY
endif

# board specific settings -- Teensy 3.5 
MCU=MK64FX512
MCU_LD = mk64fx512.ld
CPUARCH = cortex-m4

# options configured thru Arduino menus
OPTIONS = -DF_CPU=120000000 -D$(USBFLAG) -DLAYOUT_US_ENGLISH 
# options needed by many Arduino libraries to configure for Teensy 3.x
OPTIONS += -D__$(MCU)__  -DTEENSYDUINO=145 -DARDUINO=10808
# This can be used in cpp/c programs to conditionally compile for ino
# or regular cpp/c programs
OPTIONs += -DUSING_MAKEFILE 

# common flags & options
CPPFLAGS = -c -O2 -g -Wall -ffunction-sections -fdata-sections -nostdlib -MMD -mthumb -mcpu=$(CPUARCH) -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fsingle-precision-constant $(OPTIONS)
# C++ flags
CXXFLAGS = -fno-exceptions -felide-constructors -std=gnu++14 -fno-rtti
# C flags
CFLAGS =
# assembler flags
ASFLAGS = -x assembler-with-cpp

# linker options
TS = $(shell date +%s)
LDFLAGS = -O2 -Wl,--gc-sections,--relax,--defsym=__rtc_localtime=$(TS) -T$(INC)/$(MCU_LD) -lstdc++  -mthumb -mcpu=$(CPUARCH) -mfloat-abi=hard -mfpu=fpv4-sp-d16 -fsingle-precision-constant 

# libraries to link... my version of the library
# since the teensy is compiled to indivdual object we do not have a arduino lib
LIBS = -larm_cortexM4l_math -lm
# linker options
# LDFLAGS = -Os -Wl,--gc-sections -mcpu=cortex-m4 -mthumb -T$(LDSCRIPT)

# automatically create lists of the sources and objects
ASM_FILES := $(wildcard *.S)
C_FILES := $(wildcard *.c)
CPP_FILES := $(wildcard *.cpp)
INC_FILES := $(wildcard *.h)


SOURCES := $(C_FILES:.c=.o) $(CPP_FILES:.cpp=.o) $(ASM_FILES:.S=.o)
OBJS := $(foreach src,$(SOURCES), $(BUILDPATH)/$(src))

all: build 

.PHONY: build 
build: $(OBJS) $(INC_FILES) 
	@echo  "\n>>>BUILDING CORE LIBRARY"
	mkdir -p "$(LIBPATH)"
	$(AR) rcs $(LIBPATH)/core.a $(OBJS)	
	@echo  "\n>>>COPYING INCLUDE FILES"
	mkdir -p "$(INCPATH)"
	cp $(INC_FILES) $(INCPATH)
	cp -R avr/ util/ $(INCPATH)
	cp $(MCU_LD) $(INCPATH)

lib: build 

# install location core library and include

$(BUILDPATH)/%.o: %.S
	mkdir -p "$(dir $@)"
	$(CC) $(CPPFLAGS) $(ASMFLAGS) -I$(COREPATH)  -o "$@" -c "$<"                                                             
$(BUILDPATH)/%.o: %.c
	mkdir -p "$(dir $@)"
	$(CC) $(CPPFLAGS) $(CFLAGS) -I$(COREPATH) -o "$@" -c "$<"

$(BUILDPATH)/%.o: %.cpp
	@echo "[CXX]\t$<"
	mkdir -p "$(dir $@)"
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(COREPATH) -o "$@" -c "$<"



# compiler generated dependency info
# -include $(OBJS:.o=.d)
.PHONY: clean
clean:
	@echo Cleaning...
	rm -rf "$(BUILDPATH)"
	rm -rf $(INCPATH)/*.h
	rm -rf $(INCPATH)/avr/*.h
	rm -rf $(INCPATH)/util/*.h
	rm -rf $(LIBPATH)/core.a

.PHONY: dump
dump:
	@echo "COREPATH     \t$(COREPATH)"
	@echo "COMPILERPATH\t$(COMPILERPATH)"
	@echo "BUILDPATH   \t$(BUILDPATH)"
	@echo "LIBPATH     \t$(LIBPATH)"
	@echo "INCPATH     \t$(INCPATH)"
	@echo "Assembler FILES:"
	@echo $(ASM_FILES) | gawk '{for (i=1;i<=NF;i++) print $$i}'
	@echo "C FILES:"
	@echo $(C_FILES) | gawk '{for (i=1;i<=NF;i++) print $$i}'
	@echo "CPP FILES:"
	@echo $(CPP_FILES) | gawk '{for (i=1;i<=NF;i++) print $$i}'
	@echo "Object FILES:"
	@echo $(OBJS) | gawk '{for (i=1;i<=NF;i++) print $$i}'

